from __future__ import annotations
import logging, os, time, re
from enum import Enum, auto
from datetime import datetime, timedelta

from tinydb import TinyDB, Query
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, ReplyKeyboardRemove
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, ConversationHandler,
    filters, JobQueue
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–æ–Ω—Ñ—ñ–≥ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
BOT_TOKEN  = os.getenv("BOT_TOKEN", "").strip()
ADMIN_ID   = int(os.getenv("ADMIN_ID", "0").strip() or 0)
CHANNEL_ID = "@frunze_pro"
if not BOT_TOKEN or ADMIN_ID == 0:
    raise RuntimeError("BOT_TOKEN —ñ ADMIN_ID –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ!")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –º–µ–Ω—é ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
MODE_POST    = "–ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –ø–æ—Å—Ç"
MODE_NEWS    = "–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –Ω–æ–≤–∏–Ω–æ—é"
MODE_ANON    = "–ê–Ω–æ–Ω—ñ–º–Ω–∏–π —ñ–Ω—Å–∞–π–¥"
MODE_SUPPORT = "–ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –∞–≤—Ç–æ—Ä–∞"
MENU_BTNS = (MODE_POST, MODE_NEWS, MODE_ANON, MODE_SUPPORT)

MAIN_KB = ReplyKeyboardMarkup(
    [[MODE_POST, MODE_NEWS],
     [MODE_ANON, MODE_SUPPORT]],
    resize_keyboard=True,
    is_persistent=True          # ‚Üê –Ω–µ —Ö–æ–≤–∞—î—Ç—å—Å—è
)

CATEGORIES = ("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∞ –æ—Ç—Ä—É—Ç–∞", "–°—É—Å–ø—ñ–ª—å–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è", "–Ø —ñ –º–æ—è —Ñ—ñ–ª–æ—Å–æ—Ñ—ñ—è")

class Status(Enum):
    PENDING = auto(); NEED_EDIT = auto()
    APPROVED = auto(); REJECTED = auto(); EXPIRED = auto()

db = TinyDB("frunze_drafts.json"); Q = Query()
save = lambda d: db.upsert(d, Q.draft_id == d["draft_id"])
get  = lambda i: (db.search(Q.draft_id == i) or [None])[0]
now_iso = lambda: datetime.utcnow().isoformat(timespec="seconds")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Conversation states ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
SELECT_MODE, WAIT_CONTENT, WAIT_CATEGORY = range(3)

# util: –ø–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é
async def send_menu(chat_id, bot):
    await bot.send_message(chat_id, "–û–±–µ—Ä–∏ —Ç–∏–ø –¥–æ–ø–∏—Å—É:", reply_markup=MAIN_KB)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫—Ä–æ–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def cmd_start(u: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await u.message.reply_text(
        "–¢—É—Ç —Ñ–æ—Ä–º—É—é—Ç—å, –∞ –Ω–µ —Å–ø–æ–∂–∏–≤–∞—é—Ç—å.", reply_markup=MAIN_KB)
    return SELECT_MODE

async def select_mode(u: Update, ctx: ContextTypes.DEFAULT_TYPE):
    mode = u.message.text
    if mode not in MENU_BTNS:
        return SELECT_MODE
    if mode == MODE_SUPPORT:
        await u.message.reply_text("üëâ https://buymeacoffee.com/...  (–ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –∞–≤—Ç–æ—Ä–∞)")
        await send_menu(u.effective_chat.id, ctx.bot)
        return SELECT_MODE
    ctx.user_data["mode"] = mode
    prompt = {
        MODE_POST: "–ù–∞–¥—ñ—à–ª–∏ —Ç–µ–∫—Å—Ç / —Ñ–æ—Ç–æ / –≤—ñ–¥–µ–æ.",
        MODE_NEWS: "–ù–∞–¥—ñ—à–ª–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω–æ–≤–∏–Ω—É.",
        MODE_ANON: "–ù–∞–¥—ñ—à–ª–∏ —ñ–Ω—Å–∞–π–¥ (–±–µ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö)."
    }[mode]
    await u.message.reply_text(prompt, reply_markup=ReplyKeyboardRemove())
    return WAIT_CONTENT

async def got_content(u: Update, ctx: ContextTypes.DEFAULT_TYPE):
    # –≤–∞–ª—ñ–¥–∞—Ç–æ—Ä –ª—ñ–Ω–∫—É
    if ctx.user_data.get("mode") == MODE_NEWS:
        if not re.match(r"https?://", u.message.text or ""):
            await u.message.reply_text("–¶–µ –Ω–µ —Å—Ö–æ–∂–µ –Ω–∞ URL. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
            return WAIT_CONTENT
    ctx.user_data["payload"] = u.message
    kb = ReplyKeyboardMarkup([[c] for c in CATEGORIES],
                             resize_keyboard=True, one_time_keyboard=True)
    await u.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=kb)
    return WAIT_CATEGORY

async def choose_category(u: Update, ctx: ContextTypes.DEFAULT_TYPE):
    cat = u.message.text
    if cat not in CATEGORIES:
        return WAIT_CATEGORY
    payload = ctx.user_data.pop("payload")
    mode    = ctx.user_data.pop("mode")
    did = f"{payload.chat.id}_{payload.id}"
    save(dict(
        draft_id=did, user_id=payload.from_user.id, mode=mode,
        status=Status.PENDING.name, category=cat, date=now_iso(),
        expire_at=(datetime.utcnow()+timedelta(minutes=30)).timestamp()
    ))
    caption = f"<b>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:</b> {cat}\n<b>ID:</b> <code>{did}</code>"
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ",callback_data=f"approve:{did}"),
                                InlineKeyboardButton("‚úèÔ∏è",callback_data=f"edit:{did}"),
                                InlineKeyboardButton("‚ùå",callback_data=f"reject:{did}")]])
    try: await payload.copy(ADMIN_ID, caption=caption, reply_markup=kb, parse_mode=ParseMode.HTML)
    except Exception: await ctx.bot.send_message(ADMIN_ID, text=f"{caption}\n\n[–ú–µ–¥—ñ–∞/–ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ]")
    await payload.reply_text("–î—è–∫—É—é! –ß–µ—Ä–Ω–µ—Ç–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É.", reply_markup=MAIN_KB)
    return SELECT_MODE   # –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –æ–¥—Ä–∞–∑—É –¥–æ –≤–∏–±–æ—Ä—É —Ç–∏–ø—É

async def cancel(u: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await u.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=MAIN_KB)
    ctx.user_data.clear()
    return SELECT_MODE

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –º–æ–¥–µ—Ä–∞—Ü—ñ—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def mod_cb(u: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if u.effective_user.id != ADMIN_ID:
        await u.callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤", show_alert=True); return
    act,did = u.callback_query.data.split(":"); d=get(did)
    if not d: 
        await u.callback_query.answer("–ß–µ—Ä–Ω–µ—Ç–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True); return
    async def ping(txt):
        try: await ctx.bot.send_message(d["user_id"], txt, reply_markup=MAIN_KB)
        except Exception: pass
    if act=="approve":
        d["status"]=Status.APPROVED.name; save(d)
        await ping("‚úÖ –í–∞—à –¥–æ–ø–∏—Å —Å—Ö–≤–∞–ª–µ–Ω–æ –π –±—É–¥–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ.")
        try: await ctx.bot.forward_message(CHANNEL_ID, d["user_id"], int(did.split("_")[1]))
        except Exception as e: logging.error("Publish fail: %s", e)
    elif act=="reject":
        d["status"]=Status.REJECTED.name; save(d)
        await ping("‚ùå –í–∞—à –¥–æ–ø–∏—Å –Ω–µ –ø—Ä–æ–π—à–æ–≤ –º–æ–¥–µ—Ä–∞—Ü—ñ—é.")
    elif act=="edit":
        d["status"]=Status.NEED_EDIT.name; save(d)
        ctx.user_data["edit_draft"]=did
        await u.callback_query.message.reply_text("–ù–∞–ø–∏—à—ñ—Ç—å, —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏:")
    await u.callback_query.edit_message_reply_markup(None)

async def admin_comment(u: Update, ctx: ContextTypes.DEFAULT_TYPE):
    did=ctx.user_data.pop("edit_draft",None)
    if not did: return
    d=get(did)
    if d:
        await ctx.bot.send_message(
            d["user_id"],
            f"‚úèÔ∏è –í–∞—à –¥–æ–ø–∏—Å –ø–æ—Ç—Ä–µ–±—É—î –ø—Ä–∞–≤–æ–∫:\n\n{u.message.text}\n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤—É –≤–µ—Ä—Å—ñ—é (30 —Ö–≤).",
            reply_markup=MAIN_KB
        )
        await u.message.reply_text("–ö–æ–º–µ–Ω—Ç–∞—Ä –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∞–≤—Ç–æ-clean ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def cleanup(ctx: ContextTypes.DEFAULT_TYPE):
    ts=time.time()
    for d in db:
        if d["status"]==Status.NEED_EDIT.name and d["expire_at"]<ts:
            d["status"]=Status.EXPIRED.name; save(d)
            try: await ctx.bot.send_message(d["user_id"],
                    "‚è∞ –ß–∞—Å –Ω–∞ –ø—Ä–∞–≤–∫–∏ –º–∏–Ω—É–≤. –ó–∞—è–≤–∫–∞ –∑–∞–∫—Ä–∏—Ç–∞.", reply_markup=MAIN_KB)
            except Exception: pass

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ main ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def main():
    logging.basicConfig(level=logging.INFO,
        format="%(asctime)s | %(levelname)-8s | %(name)s: %(message)s")
    app = Application.builder().token(BOT_TOKEN).build()
    app.job_queue.run_repeating(cleanup, 300, first=300)

    conv=ConversationHandler(
        entry_points=[CommandHandler("start", cmd_start)],
        states = {
            SELECT_MODE:   [MessageHandler(filters.Regex(f"^({'|'.join(MENU_BTNS)})$"), select_mode)],
            WAIT_CONTENT:  [MessageHandler(filters.ALL & ~filters.COMMAND, got_content)],
            WAIT_CATEGORY: [MessageHandler(filters.Regex(f"^({'|'.join(CATEGORIES)})$"), choose_category)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        per_user=True, per_chat=True, name="frunze_flow"
    )
    app.add_handler(conv)
    app.add_handler(CallbackQueryHandler(mod_cb))
    app.add_handler(MessageHandler(filters.TEXT & filters.User(ADMIN_ID), admin_comment))

    logging.info("Bot started")
    app.run_polling(stop_signals=None)

if __name__=="__main__":
    main()