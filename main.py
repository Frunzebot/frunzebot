# bot.py  ‚Äì  FRUNZEBOT MVP —è–¥—Ä–æ
# python-telegram-bot v20+

import logging
import os
from enum import Enum, auto
from datetime import datetime, timedelta

from tinydb import TinyDB, Query
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–û–ù–§–Ü–ì ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
BOT_TOKEN   = os.getenv("TELEGRAM_TOKEN") or "PUT_YOUR_TOKEN_HERE"
ADMIN_ID    = int(os.getenv("ADMIN_ID")   or 6266425881)      # –∑–∞–º—ñ–Ω–∏ —Å–≤–æ—ó–º
DB_PATH     = "frunze_drafts.json"

CATEGORIES = [
    "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∞ –æ—Ç—Ä—É—Ç–∞",
    "–°—É—Å–ø—ñ–ª—å–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è",
    "–Ø —ñ –º–æ—è —Ñ—ñ–ª–æ—Å–æ—Ñ—ñ—è",
]

class DraftStatus(Enum):
    PENDING   = auto()
    NEED_EDIT = auto()
    APPROVED  = auto()
    REJECTED  = auto()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –°–•–û–í–ò–©–ï ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
db = TinyDB(DB_PATH)
Draft = Query()

def save_draft(draft: dict):
    db.upsert(draft, Draft.draft_id == draft["draft_id"])

def get_draft(draft_id: str) -> dict | None:
    res = db.search(Draft.draft_id == draft_id)
    return res[0] if res else None

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –•–ï–ù–î–õ–ï–†–ò ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = ReplyKeyboardMarkup(
        [["–ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –ø–æ—Å—Ç"]],
        resize_keyboard=True,
        one_time_keyboard=True,
    )
    await update.message.reply_text(
        "–¢—É—Ç —Ñ–æ—Ä–º—É—é—Ç—å, –∞ –Ω–µ —Å–ø–æ–∂–∏–≤–∞—é—Ç—å.\n\n–ù–∞–¥—ñ—à–ª–∏ —Ç–µ–∫—Å—Ç / —Ñ–æ—Ç–æ / –≤—ñ–¥–µ–æ ‚Äì "
        "—ñ –æ–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é.", reply_markup=kb
    )

async def incoming_content(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —á–µ—Ä–Ω–µ—Ç–∫—É —É context –¥–æ –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    context.user_data["payload"] = update.message
    kb = ReplyKeyboardMarkup(
        [[c] for c in CATEGORIES], resize_keyboard=True, one_time_keyboard=True
    )
    await update.message.reply_text("–û–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=kb)

async def set_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text not in CATEGORIES:
        return
    payload = context.user_data.pop("payload", None)
    if not payload:
        return

    draft_id = f"{payload.chat.id}_{payload.id}"
    draft = {
        "draft_id": draft_id,
        "user_id": payload.from_user.id,
        "status": DraftStatus.PENDING.name,
        "category": update.message.text,
        "date": datetime.now().isoformat(),
    }
    save_draft(draft)

    # –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω–æ–≤—ñ —á–µ—Ä–Ω–µ—Ç–∫—É
    caption = f"<b>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:</b> {draft['category']}\n<b>ID:</b> {draft_id}"
    buttons = [
        [
            InlineKeyboardButton("‚úÖ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data=f"approve:{draft_id}"),
            InlineKeyboardButton("‚úèÔ∏è –ü–æ—Ç—Ä–µ–±—É—î –ø—Ä–∞–≤–æ–∫", callback_data=f"edit:{draft_id}"),
            InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏",    callback_data=f"reject:{draft_id}"),
        ]
    ]
    kb = InlineKeyboardMarkup(buttons)
    await payload.copy(chat_id=ADMIN_ID, caption=caption, parse_mode=ParseMode.HTML, reply_markup=kb)

    await payload.reply_text("–î—è–∫—É—é! –ß–µ—Ä–Ω–µ—Ç–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É.", reply_markup=ReplyKeyboardRemove())

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ê–î–ú–Ü–ù-–ö–ù–û–ü–ö–ò ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def moderation_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.callback_query.answer("–ù–µ —Ç–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è üòâ", show_alert=True)
        return

    action, draft_id = update.callback_query.data.split(":")
    draft = get_draft(draft_id)
    if not draft:
        await update.callback_query.answer("–ß–µ—Ä–Ω–µ—Ç–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    # –≥–æ—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó
    async def notify_user(text):
        try:
            await context.bot.send_message(chat_id=draft["user_id"], text=text)
        except Exception as e:
            logging.warning("Could not notify user: %s", e)

    if action == "approve":
        draft["status"] = DraftStatus.APPROVED.name
        save_draft(draft)
        await notify_user("‚úÖ –í–∞—à –¥–æ–ø–∏—Å —Å—Ö–≤–∞–ª–µ–Ω–æ –π –±—É–¥–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ.")
        await update.callback_query.edit_message_reply_markup(None)

    elif action == "reject":
        draft["status"] = DraftStatus.REJECTED.name
        save_draft(draft)
        await notify_user("‚ùå –í–∞—à –¥–æ–ø–∏—Å –Ω–µ –ø—Ä–æ–π—à–æ–≤ –º–æ–¥–µ—Ä–∞—Ü—ñ—é.")
        await update.callback_query.edit_message_reply_markup(None)

    elif action == "edit":
        draft["status"] = DraftStatus.NEED_EDIT.name
        save_draft(draft)
        context.user_data["pending_edit"] = draft_id
        await update.callback_query.message.reply_text(
            "–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ, —â–æ —Å–∞–º–µ —Ç—Ä–µ–±–∞ –ø—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏:",
            reply_markup=ReplyKeyboardRemove()
        )
        await update.callback_query.answer()

async def admin_edit_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    draft_id = context.user_data.pop("pending_edit", None)
    if not draft_id:
        return

    draft = get_draft(draft_id)
    if not draft:
        return

    comment = update.message.text
    await context.bot.send_message(
        chat_id=draft["user_id"],
        text=f"‚úèÔ∏è –í–∞—à –¥–æ–ø–∏—Å –ø–æ—Ç—Ä–µ–±—É—î –ø—Ä–∞–≤–æ–∫:\n\n{comment}\n\n"
             "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –æ–Ω–æ–≤–ª–µ–Ω—É –≤–µ—Ä—Å—ñ—é —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å."
    )
    await update.message.reply_text("–ö–æ–º–µ–Ω—Ç–∞—Ä –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–≤—Ç–æ—Ä—É.")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ú–ï–ô–ù ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def main():
    logging.basicConfig(level=logging.INFO)
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, set_category))
    app.add_handler(MessageHandler(
        (filters.PHOTO | filters.VIDEO | filters.Document.ALL | filters.TEXT) &
        ~filters.Filter(lambda m: m.text in CATEGORIES),
        incoming_content,
    ))
    app.add_handler(CallbackQueryHandler(moderation_callback))
    app.add_handler(MessageHandler(filters.TEXT, admin_edit_comment))

    logging.info("Bot starting‚Ä¶")
    app.run_polling()

if __name__ == "__main__":
    main()