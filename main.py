from __future__ import annotations
import os, re, time, logging, requests
from enum import Enum, auto
from datetime import datetime, timedelta

from bs4 import BeautifulSoup
from tinydb import TinyDB, Query
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, ReplyKeyboardRemove
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application, CommandHandler, ConversationHandler,
    MessageHandler, CallbackQueryHandler, ContextTypes,
    filters, JobQueue
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ENV ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
BOT_TOKEN  = os.getenv("BOT_TOKEN", "").strip()
ADMIN_ID   = int(os.getenv("ADMIN_ID", "0").strip() or 0)
CHANNEL_ID = "@frunze_pro"
if not BOT_TOKEN or ADMIN_ID == 0:
    raise RuntimeError("–£ Variables –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ BOT_TOKEN —Ç–∞ ADMIN_ID!")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –º–µ–Ω—é ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
MODE_POST    = "–ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –ø–æ—Å—Ç"
MODE_NEWS    = "–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –Ω–æ–≤–∏–Ω–æ—é"
MODE_ANON    = "–ê–Ω–æ–Ω—ñ–º–Ω–∏–π —ñ–Ω—Å–∞–π–¥"
MODE_SUPPORT = "–ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –∞–≤—Ç–æ—Ä–∞"
MENU_BTNS = (MODE_POST, MODE_NEWS, MODE_ANON, MODE_SUPPORT)

MAIN_KB = ReplyKeyboardMarkup(
    [[MODE_POST, MODE_NEWS],
     [MODE_ANON, MODE_SUPPORT]],
    resize_keyboard=True,
    is_persistent=True
)

CATEGORIES = ("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∞ –æ—Ç—Ä—É—Ç–∞", "–°—É—Å–ø—ñ–ª—å–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è", "–Ø —ñ –º–æ—è —Ñ—ñ–ª–æ—Å–æ—Ñ—ñ—è")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –±–∞–∑–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class St(Enum):
    PENDING = auto(); NEED_EDIT = auto()
    APPROVED = auto(); REJECTED = auto(); EXPIRED = auto()

db = TinyDB("frunze_drafts.json"); Q = Query()
save = lambda d: db.upsert(d, Q.id == d["id"])
get  = lambda i: (db.search(Q.id == i) or [None])[0]

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —É—Ç–∏–ª—ñ—Ç–∞ OG-–º–µ—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def og_meta(url: str) -> tuple[str, str]:
    try:
        r = requests.get(url, headers={"User-Agent": "Mozilla/5.0"}, timeout=6)
        s = BeautifulSoup(r.text, "html.parser")
        ttl = (s.find("meta", property="og:title") or {}).get("content") \
           or (s.title.string if s.title else "")
        desc = (s.find("meta", property="og:description") or {}).get("content") or ""
        return ttl.strip(), desc.strip()
    except Exception:
        return "", ""

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Conversation states ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
SELECT_MODE, WAIT_CONTENT, WAIT_CAT = range(3)

async def send_menu(chat_id, bot):
    await bot.send_message(chat_id, "–û–±–µ—Ä–∏ —Ç–∏–ø –¥–æ–ø–∏—Å—É:", reply_markup=MAIN_KB)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /start ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def start(upd: Update, _):
    await upd.message.reply_text("–¢—É—Ç —Ñ–æ—Ä–º—É—é—Ç—å, –∞ –Ω–µ —Å–ø–æ–∂–∏–≤–∞—é—Ç—å.", reply_markup=MAIN_KB)
    return SELECT_MODE

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –≤–∏–±—ñ—Ä —Ä–µ–∂–∏–º—É ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def pick_mode(upd: Update, ctx: ContextTypes.DEFAULT_TYPE):
    m = upd.message.text
    if m not in MENU_BTNS:
        return SELECT_MODE
    if m == MODE_SUPPORT:
        await upd.message.reply_text("üëâ https://buymeacoffee.com/...  (–ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –∞–≤—Ç–æ—Ä–∞)")
        await send_menu(upd.effective_chat.id, ctx.bot); return SELECT_MODE
    ctx.user_data["mode"] = m
    prompt = {MODE_POST:"–ù–∞–¥—ñ—à–ª–∏ —Ç–µ–∫—Å—Ç / —Ñ–æ—Ç–æ / –≤—ñ–¥–µ–æ.",
              MODE_NEWS:"–ù–∞–¥—ñ—à–ª–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω–æ–≤–∏–Ω—É.",
              MODE_ANON:"–ù–∞–¥—ñ—à–ª–∏ —ñ–Ω—Å–∞–π–¥ (–±–µ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö)."}[m]
    await upd.message.reply_text(prompt, reply_markup=ReplyKeyboardRemove())
    return WAIT_CONTENT

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–æ–Ω—Ç–µ–Ω—Ç ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def got_content(upd: Update, ctx: ContextTypes.DEFAULT_TYPE):
    mode = ctx.user_data["mode"]
    if mode == MODE_NEWS:
        url = upd.message.text or ""
        if not re.match(r"https?://", url):
            await upd.message.reply_text("–¶–µ –Ω–µ —Å—Ö–æ–∂–µ –Ω–∞ URL. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
            return WAIT_CONTENT
        title, desc = og_meta(url)
        ctx.user_data["meta"] = dict(url=url, title=title, desc=desc)
    ctx.user_data["payload"] = upd.message
    kb = ReplyKeyboardMarkup([[c] for c in CATEGORIES],
                             resize_keyboard=True, one_time_keyboard=True)
    await upd.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=kb)
    return WAIT_CAT

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è ‚Üí —á–µ—Ä–Ω–µ—Ç–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def choose_cat(upd: Update, ctx: ContextTypes.DEFAULT_TYPE):
    cat = upd.message.text
    if cat not in CATEGORIES: return WAIT_CAT
    payload, mode = ctx.user_data.pop("payload"), ctx.user_data.pop("mode")
    meta = ctx.user_data.pop("meta", {})
    tag = "–§—Ä—É–Ω–∑–µ" if payload.from_user.id == ADMIN_ID else "–ñ–æ–ª—É–¥–µ–≤–∏–π –≤–∫–∏–¥ –≤—ñ–¥ —Å–ø—ñ–ª—å–Ω–æ—Ç–∏"

    if mode == MODE_NEWS:
        url, title, desc = meta["url"], meta["title"] or "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞", meta["desc"]
        pub_text = (f"üì∞ <b>{tag}</b>\n<b>{title}</b>\n{desc}\n\n"
                    f"<a href=\"{url}\">–ß–∏—Ç–∞—Ç–∏ –Ω–∞ —Å–∞–π—Ç—ñ</a>")
    else:
        pub_text = f"<b>{tag}</b>"

    did = f"{payload.chat.id}_{payload.id}"
    draft = dict(id=did, uid=payload.from_user.id, mode=mode,
                 cat=cat, status=St.PENDING.name, pub=pub_text,
                 exp=(time.time()+1800))
    save(draft)

    kb = InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ",f"approve:{did}"),
                                InlineKeyboardButton("‚úèÔ∏è",f"edit:{did}"),
                                InlineKeyboardButton("‚ùå",f"reject:{did}")]])
    if mode == MODE_NEWS:
        await ctx.bot.send_message(ADMIN_ID, pub_text,
            parse_mode=ParseMode.HTML, reply_markup=kb,
            disable_web_page_preview=False)
    else:
        try:
            await payload.copy(ADMIN_ID,
                caption=f"{pub_text}\n\n<b>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:</b> {cat}\n<b>ID:</b> <code>{did}</code>",
                parse_mode=ParseMode.HTML, reply_markup=kb)
        except Exception:
            await ctx.bot.send_message(ADMIN_ID,
                f"{pub_text}\n\n<b>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:</b> {cat}\n<b>ID:</b> <code>{did}</code>\n\n[–ú–µ–¥—ñ–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ]",
                parse_mode=ParseMode.HTML, reply_markup=kb)

    await payload.reply_text("–î—è–∫—É—é! –ß–µ—Ä–Ω–µ—Ç–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É.", reply_markup=MAIN_KB)
    return SELECT_MODE

async def cancel(upd: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data.clear()
    await upd.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=MAIN_KB)
    return SELECT_MODE

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –º–æ–¥–µ—Ä–∞—Ü—ñ—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def cb_mod(upd: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if upd.effective_user.id != ADMIN_ID:
        await upd.callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤", show_alert=True); return
    act,did = upd.callback_query.data.split(":"); d = get(did)
    if not d: 
        await upd.callback_query.answer("–ß–µ—Ä–Ω–µ—Ç–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True); return

    async def ping(msg):
        try: await ctx.bot.send_message(d["uid"], msg, reply_markup=MAIN_KB)
        except Exception: pass

    if act=="approve":
        d["status"]=St.APPROVED.name; save(d)
        await ping("‚úÖ –í–∞—à –¥–æ–ø–∏—Å —Å—Ö–≤–∞–ª–µ–Ω–æ –π –±—É–¥–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ.")
        if d["mode"]==MODE_NEWS:
            await ctx.bot.send_message(CHANNEL_ID, d["pub"],
                parse_mode=ParseMode.HTML, disable_web_page_preview=False)
        else:
            uid,msg_id = d["id"].split("_")
            await ctx.bot.forward_message(CHANNEL_ID, int(uid), int(msg_id))
    elif act=="reject":
        d["status"]=St.REJECTED.name; save(d)
        await ping("‚ùå –í–∞—à –¥–æ–ø–∏—Å –Ω–µ –ø—Ä–æ–π—à–æ–≤ –º–æ–¥–µ—Ä–∞—Ü—ñ—é.")
    elif act=="edit":
        d["status"]=St.NEED_EDIT.name; save(d)
        ctx.user_data["edit"]=did
        await upd.callback_query.message.reply_text("–ù–∞–ø–∏—à—ñ—Ç—å, —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏:")
    await upd.callback_query.edit_message_reply_markup(None)

async def admin_com(upd: Update, ctx: ContextTypes.DEFAULT_TYPE):
    did = ctx.user_data.pop("edit",None)
    if not did: return
    d=get(did)
    if d:
        await ctx.bot.send_message(d["uid"],
            f"‚úèÔ∏è –í–∞—à –¥–æ–ø–∏—Å –ø–æ—Ç—Ä–µ–±—É—î –ø—Ä–∞–≤–æ–∫:\n\n{upd.message.text}\n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤—É –≤–µ—Ä—Å—ñ—é (30 —Ö–≤).",
            reply_markup=MAIN_KB)
        await upd.message.reply_text("–ö–æ–º–µ–Ω—Ç–∞—Ä –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∞–≤—Ç–æ-clean ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def clean(ctx: ContextTypes.DEFAULT_TYPE):
    ts=time.time()
    for d in db:
        if d["status"]==St.NEED_EDIT.name and d["exp"]<ts:
            d["status"]=St.EXPIRED.name; save(d)
            try: await ctx.bot.send_message(d["uid"],
                    "‚è∞ –ß–∞—Å –Ω–∞ –ø—Ä–∞–≤–∫–∏ –º–∏–Ω—É–≤. –ó–∞—è–≤–∫–∞ –∑–∞–∫—Ä–∏—Ç–∞.", reply_markup=MAIN_KB)
            except Exception: pass

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ main ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def main():
    logging.basicConfig(level=logging.INFO,
        format="%(asctime)s | %(levelname)-8s | %(name)s: %(message)s")
    app = Application.builder().token(BOT_TOKEN).build()
    app.job_queue.run_repeating(clean, 300, first=300)

    flow = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            SELECT_MODE: [MessageHandler(filters.Regex(f"^({'|'.join(MENU_BTNS)})$"), pick_mode)],
            WAIT_CONTENT:[MessageHandler(filters.ALL & ~filters.COMMAND, got_content)],
            WAIT_CAT:    [MessageHandler(filters.Regex(f"^({'|'.join(CATEGORIES)})$"), choose_cat)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        per_user=True, per_chat=True, name="frunze_flow"
    )

    app.add_handler(flow)
    app.add_handler(CallbackQueryHandler(cb_mod))
    app.add_handler(MessageHandler(filters.TEXT & filters.User(ADMIN_ID), admin_com))

    logging.info("Bot started"); app.run_polling(stop_signals=None)

if __name__=="__main__":
    main()