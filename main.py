from __future__ import annotations
import logging, os, time
from enum import Enum, auto
from datetime import datetime, timedelta

from tinydb import TinyDB, Query
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, ReplyKeyboardRemove
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters, JobQueue
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–æ–Ω—Ñ—ñ–≥ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
BOT_TOKEN  = os.getenv("BOT_TOKEN", "").strip()
ADMIN_ID   = int(os.getenv("ADMIN_ID", "0").strip() or 0)
CHANNEL_ID = "@frunze_pro"

if not BOT_TOKEN or ADMIN_ID == 0:
    raise RuntimeError("BOT_TOKEN —Ç–∞ ADMIN_ID –º–∞—é—Ç—å –±—É—Ç–∏ —É Variables!")

MENU_POST      = "–ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –ø–æ—Å—Ç"
MENU_NEWS      = "–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –Ω–æ–≤–∏–Ω–æ—é"
MENU_ANON      = "–ê–Ω–æ–Ω—ñ–º–Ω–∏–π —ñ–Ω—Å–∞–π–¥"
MENU_SUPPORT   = "–ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –∞–≤—Ç–æ—Ä–∞"
MENU_BTNS      = (MENU_POST, MENU_NEWS, MENU_ANON, MENU_SUPPORT)

CATEGORIES = ("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∞ –æ—Ç—Ä—É—Ç–∞", "–°—É—Å–ø—ñ–ª—å–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è", "–Ø —ñ –º–æ—è —Ñ—ñ–ª–æ—Å–æ—Ñ—ñ—è")

class Status(Enum):
    PENDING = auto(); NEED_EDIT = auto(); APPROVED = auto()
    REJECTED = auto(); EXPIRED = auto()

db = TinyDB("frunze_drafts.json"); Q = Query()
save = lambda d: db.upsert(d, Q.draft_id == d["draft_id"])
get  = lambda i: (db.search(Q.draft_id == i) or [None])[0]
now_iso = lambda: datetime.utcnow().isoformat(timespec="seconds")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–æ–º–∞–Ω–¥–∞ /start ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def cmd_start(u: Update, _):
    kb = ReplyKeyboardMarkup(
        [[MENU_POST, MENU_NEWS],
         [MENU_ANON, MENU_SUPPORT]],
        resize_keyboard=True
    )
    await u.message.reply_text(
        "–¢—É—Ç —Ñ–æ—Ä–º—É—é—Ç—å, –∞ –Ω–µ —Å–ø–æ–∂–∏–≤–∞—é—Ç—å.\n\n"
        "–û–±–µ—Ä–∏ —Ç–∏–ø –¥–æ–ø–∏—Å—É –≤ –º–µ–Ω—é –Ω–∏–∂—á–µ.", reply_markup=kb
    )

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –≤–∏–±—ñ—Ä —Ä–µ–∂–∏–º—É ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def choose_mode(u: Update, ctx: ContextTypes.DEFAULT_TYPE):
    mode = u.message.text
    if mode not in MENU_BTNS:                # –Ω–µ –Ω–∞—à–∞ –∫–Ω–æ–ø–∫–∞ ‚Äî —ñ–≥–Ω–æ—Ä—É—î–º–æ
        return
    ctx.user_data.clear()
    ctx.user_data["mode"] = mode
    if mode == MENU_SUPPORT:
        await u.message.reply_text("üëâ https://buymeacoffee.com/...  (–ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –∞–≤—Ç–æ—Ä–∞)")
        ctx.user_data.clear()
        return
    prompt = {
        MENU_POST:  "–ù–∞–¥—ñ—à–ª–∏ —Ç–µ–∫—Å—Ç / —Ñ–æ—Ç–æ / –≤—ñ–¥–µ–æ –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó.",
        MENU_NEWS:  "–ù–∞–¥—ñ—à–ª–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω–æ–≤–∏–Ω—É.",
        MENU_ANON:  "–ù–∞–¥—ñ—à–ª–∏ —ñ–Ω—Å–∞–π–¥ (–º–∏ –Ω–µ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–≤–æ—ó –¥–∞–Ω—ñ)."
    }[mode]
    await u.message.reply_text(prompt, reply_markup=ReplyKeyboardRemove())

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ø—Ä–∏–π–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç—É ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def handle_content(u: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if "mode" not in ctx.user_data:          # –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –≤–∏–±—Ä–∞–≤ —Ç–∏–ø
        return
    ctx.user_data["payload"] = u.message
    cat_kb = ReplyKeyboardMarkup([[c] for c in CATEGORIES],
                                 resize_keyboard=True, one_time_keyboard=True)
    await u.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=cat_kb)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –≤–∏–±—ñ—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def choose_category(u: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if "payload" not in ctx.user_data: return
    cat = u.message.text
    if cat not in CATEGORIES: return
    payload = ctx.user_data.pop("payload")
    mode    = ctx.user_data.pop("mode")
    did = f"{payload.chat.id}_{payload.id}"
    save(dict(
        draft_id=did, user_id=payload.from_user.id,
        status=Status.PENDING.name, category=cat, mode=mode,
        date=now_iso(), expire_at=(datetime.utcnow()+timedelta(minutes=30)).timestamp()
    ))
    caption = f"<b>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:</b> {cat}\n<b>ID:</b> <code>{did}</code>"
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ",callback_data=f"approve:{did}"),
                                InlineKeyboardButton("‚úèÔ∏è",callback_data=f"edit:{did}"),
                                InlineKeyboardButton("‚ùå",callback_data=f"reject:{did}")]])
    try:
        await payload.copy(ADMIN_ID, caption=caption, reply_markup=kb, parse_mode=ParseMode.HTML)
    except Exception:
        await ctx.bot.send_message(ADMIN_ID, text=f"{caption}\n\n[–ú–µ–¥—ñ–∞/–ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ]")
    await payload.reply_text("–î—è–∫—É—é! –ß–µ—Ä–Ω–µ—Ç–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É.")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –º–æ–¥–µ—Ä–∞—Ü—ñ—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def mod_cb(u: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if u.effective_user.id != ADMIN_ID:
        await u.callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤", show_alert=True); return
    act,did = u.callback_query.data.split(":"); d=get(did)
    if not d: await u.callback_query.answer("–ß–µ—Ä–Ω–µ—Ç–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True); return
    async def ping(t): 
        try: await ctx.bot.send_message(d["user_id"], t)
        except Exception: pass
    if act=="approve":
        d["status"]=Status.APPROVED.name; save(d)
        await ping("‚úÖ –í–∞—à –¥–æ–ø–∏—Å —Å—Ö–≤–∞–ª–µ–Ω–æ –π –±—É–¥–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ.")
        try: await ctx.bot.forward_message(CHANNEL_ID, d["user_id"], int(did.split("_")[1]))
        except Exception as e: logging.error("Publish fail: %s",e)
        await u.callback_query.edit_message_reply_markup(None)
    elif act=="reject":
        d["status"]=Status.REJECTED.name; save(d)
        await ping("‚ùå –í–∞—à –¥–æ–ø–∏—Å –Ω–µ –ø—Ä–æ–π—à–æ–≤ –º–æ–¥–µ—Ä–∞—Ü—ñ—é.")
        await u.callback_query.edit_message_reply_markup(None)
    elif act=="edit":
        d["status"]=Status.NEED_EDIT.name; save(d)
        ctx.user_data["edit_draft"]=did
        await u.callback_query.message.reply_text("–ù–∞–ø–∏—à—ñ—Ç—å, —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏:")
        await u.callback_query.answer()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–æ–º–µ–Ω—Ç–∞—Ä –∞–¥–º—ñ–Ω–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def admin_comment(u: Update, ctx: ContextTypes.DEFAULT_TYPE):
    did=ctx.user_data.pop("edit_draft",None)
    if not did: return
    d=get(did)
    if d:
        await ctx.bot.send_message(d["user_id"],
            f"‚úèÔ∏è –í–∞—à –¥–æ–ø–∏—Å –ø–æ—Ç—Ä–µ–±—É—î –ø—Ä–∞–≤–æ–∫:\n\n{u.message.text}\n\n"
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤—É –≤–µ—Ä—Å—ñ—é —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å (30 —Ö–≤).")
        await u.message.reply_text("–ö–æ–º–µ–Ω—Ç–∞—Ä –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∞–≤—Ç–æ-—á–∏—Å—Ç–∏–ª—å–Ω–∏–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def cleanup(ctx: ContextTypes.DEFAULT_TYPE):
    ts=time.time()
    for d in db:
        if d["status"]==Status.NEED_EDIT.name and d["expire_at"]<ts:
            d["status"]=Status.EXPIRED.name; save(d)
            try: await ctx.bot.send_message(d["user_id"],
                    "‚è∞ –ß–∞—Å –Ω–∞ –ø—Ä–∞–≤–∫–∏ –º–∏–Ω—É–≤. –ó–∞—è–≤–∫–∞ –∑–∞–∫—Ä–∏—Ç–∞.")
            except Exception: pass

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ main ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def main():
    logging.basicConfig(level=logging.INFO,
        format="%(asctime)s | %(levelname)-8s | %(name)s: %(message)s")
    app=Application.builder().token(BOT_TOKEN).build()
    app.job_queue.run_repeating(cleanup, 300, first=300)

    app.add_handler(CommandHandler("start", cmd_start))
    # –ø–æ—Ä—è–¥–æ–∫ –≤–∞–∂–ª–∏–≤–∏–π
    app.add_handler(MessageHandler(filters.TEXT & filters.User(ADMIN_ID), admin_comment))
    app.add_handler(MessageHandler(filters.Regex(f"^({'|'.join(MENU_BTNS)})$"), choose_mode))
    app.add_handler(MessageHandler(
        (filters.PHOTO | filters.VIDEO | filters.Document.ALL | filters.TEXT)
        & ~filters.Regex(f"^({'|'.join(CATEGORIES)})$")
        & ~filters.User(ADMIN_ID), handle_content))
    app.add_handler(MessageHandler(filters.Regex(f"^({'|'.join(CATEGORIES)})$"), choose_category))
    app.add_handler(CallbackQueryHandler(mod_cb))

    logging.info("Bot starting‚Ä¶")
    app.run_polling(stop_signals=None)

if __name__=="__main__":
    main()