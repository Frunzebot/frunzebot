"""
FRUNZEBOT ‚Äì MVP —è–¥—Ä–æ (Phase 1)
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚Ä¢ –ø—Ä–∏–π–æ–º —Ç–µ–∫—Å—Ç—É / —Ñ–æ—Ç–æ / –≤—ñ–¥–µ–æ / –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
‚Ä¢ –≤–∏–±—ñ—Ä –æ–¥–Ω—ñ—î—ó –∑ —Ç—Ä—å–æ—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
‚Ä¢ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å: ‚úÖ ‚úèÔ∏è ‚ùå
‚Ä¢ —Ñ—ñ–¥–±–µ–∫–∏ –∞–≤—Ç–æ—Ä–æ–≤—ñ
"""

from __future__ import annotations

import logging
import os
from enum import Enum, auto
from datetime import datetime
from pathlib import Path

from dotenv import load_dotenv
from tinydb import TinyDB, Query
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–û–ù–§–Ü–ì ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# .env –æ–ø—Ü—ñ–π–Ω–∏–π: –ª–æ–∫–∞–ª—å–Ω–æ –∑—Ä—É—á–Ω–æ, –Ω–∞ Railway –¥–æ—Å—Ç–∞—Ç–Ω—å–æ Variables
if Path(".env").exists():
    load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
ADMIN_ID  = int(os.getenv("ADMIN_ID", "0").strip() or 0)

if not BOT_TOKEN or any(ch.isspace() for ch in BOT_TOKEN):
    raise RuntimeError(
        "BOT_TOKEN –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –º—ñ—Å—Ç–∏—Ç—å –ø—Ä–æ–±—ñ–ª–∏/–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è —Ä—è–¥–∫–∞. "
        "–í—ñ–¥—Ä–µ–¥–∞–≥—É–π –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞."
    )
if ADMIN_ID == 0:
    raise RuntimeError("ADMIN_ID –Ω–µ –∑–∞–¥–∞–Ω–∏–π –∞–±–æ –Ω–µ —î —á–∏—Å–ª–æ–º Telegram-ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

DB_PATH = "frunze_drafts.json"


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –î–ê–ù–Ü ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class DraftStatus(Enum):
    PENDING   = auto()
    NEED_EDIT = auto()
    APPROVED  = auto()
    REJECTED  = auto()


CATEGORIES: tuple[str, ...] = (
    "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∞ –æ—Ç—Ä—É—Ç–∞",
    "–°—É—Å–ø—ñ–ª—å–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è",
    "–Ø —ñ –º–æ—è —Ñ—ñ–ª–æ—Å–æ—Ñ—ñ—è",
)

db     = TinyDB(DB_PATH)
DQ     = Query()


def save_draft(obj: dict) -> None:
    db.upsert(obj, DQ.draft_id == obj["draft_id"])


def get_draft(draft_id: str) -> dict | None:
    res = db.search(DQ.draft_id == draft_id)
    return res[0] if res else None


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –•–ï–ù–î–õ–ï–†–ò ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def cmd_start(update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
    kb = ReplyKeyboardMarkup(
        [["–ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –ø–æ—Å—Ç"]], resize_keyboard=True, one_time_keyboard=True
    )
    await update.message.reply_text(
        "–¢—É—Ç —Ñ–æ—Ä–º—É—é—Ç—å, –∞ –Ω–µ —Å–ø–æ–∂–∏–≤–∞—é—Ç—å.\n\n–ù–∞–¥—ñ—à–ª–∏ —Ç–µ–∫—Å—Ç / —Ñ–æ—Ç–æ / –≤—ñ–¥–µ–æ –π –æ–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é.",
        reply_markup=kb,
    )


async def handle_payload(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–∏–π–º–∞—î–º–æ –ø–µ—Ä—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –∫–µ—à—É—î–º–æ –π –ø—Ä–æ—Å–∏–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é."""
    context.user_data["payload"] = update.message
    cat_kb = ReplyKeyboardMarkup(
        [[c] for c in CATEGORIES], resize_keyboard=True, one_time_keyboard=True
    )
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=cat_kb)


async def set_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ–±—Ä–∞–≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é ‚Äî —Ñ–æ—Ä–º—É—î–º–æ —á–µ—Ä–Ω–µ—Ç–∫—É –π —à–ª–µ–º–æ –∞–¥–º—ñ–Ω–æ–≤—ñ."""
    category = update.message.text
    payload = context.user_data.pop("payload", None)

    if category not in CATEGORIES or payload is None:
        return  # –∑–∞–π–≤–∏–π –≤–∏–∫–ª–∏–∫

    draft_id = f"{payload.chat.id}_{payload.id}"
    draft = {
        "draft_id": draft_id,
        "user_id": payload.from_user.id,
        "status": DraftStatus.PENDING.name,
        "category": category,
        "date": datetime.utcnow().isoformat(timespec="seconds"),
    }
    save_draft(draft)

    # ‚Äî‚Äî‚Äî‚Äî‚Äî —à–ª–µ–º–æ –∞–¥–º—ñ–Ω—É ‚Äî‚Äî‚Äî‚Äî‚Äî
    caption = (
        f"<b>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:</b> {category}\n"
        f"<b>ID:</b> <code>{draft_id}</code>"
    )
    buttons = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton("‚úÖ", callback_data=f"approve:{draft_id}"),
                InlineKeyboardButton("‚úèÔ∏è", callback_data=f"edit:{draft_id}"),
                InlineKeyboardButton("‚ùå", callback_data=f"reject:{draft_id}"),
            ]
        ]
    )

    try:
        await payload.copy(
            chat_id=ADMIN_ID,
            caption=caption,
            parse_mode=ParseMode.HTML,
            reply_markup=buttons,
        )
    except Exception as err:  # noqa: BLE001
        logging.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –º–µ–¥—ñ–∞ –¥–ª—è –∞–¥–º—ñ–Ω–∞: %s", err)
        await context.bot.send_message(
            chat_id=ADMIN_ID, text=f"{caption}\n\n[–ú–µ–¥—ñ–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ]"
        )

    await payload.reply_text(
        "–î—è–∫—É—é! –ß–µ—Ä–Ω–µ—Ç–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É.",
        reply_markup=ReplyKeyboardRemove(),
    )


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ú–û–î–ï–†–ê–¶–Ü–Ø ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def cb_moderation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_user.id != ADMIN_ID:
        await update.callback_query.answer("–¢–∏ –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä üòâ", show_alert=True)
        return

    action, draft_id = update.callback_query.data.split(":")
    draft = get_draft(draft_id)
    if not draft:
        await update.callback_query.answer("–ß–µ—Ä–Ω–µ—Ç–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return

    async def notify(text: str) -> None:
        try:
            await context.bot.send_message(draft["user_id"], text)
        except Exception as e:  # noqa: BLE001
            logging.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: %s", e)

    if action == "approve":
        draft["status"] = DraftStatus.APPROVED.name
        save_draft(draft)
        await notify("‚úÖ –í–∞—à –¥–æ–ø–∏—Å —Å—Ö–≤–∞–ª–µ–Ω–æ –π –±—É–¥–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ.")
        await update.callback_query.edit_message_reply_markup(None)

    elif action == "reject":
        draft["status"] = DraftStatus.REJECTED.name
        save_draft(draft)
        await notify("‚ùå –í–∞—à –¥–æ–ø–∏—Å –Ω–µ –ø—Ä–æ–π—à–æ–≤ –º–æ–¥–µ—Ä–∞—Ü—ñ—é.")
        await update.callback_query.edit_message_reply_markup(None)

    elif action == "edit":
        draft["status"] = DraftStatus.NEED_EDIT.name
        save_draft(draft)
        context.user_data["edit_draft"] = draft_id
        await update.callback_query.message.reply_text(
            "–ù–∞–ø–∏—à—ñ—Ç—å, —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏:",
            reply_markup=ReplyKeyboardRemove(),
        )
        await update.callback_query.answer()


async def admin_comment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    draft_id = context.user_data.pop("edit_draft", None)
    if not draft_id or update.effective_user.id != ADMIN_ID:
        return

    draft = get_draft(draft_id)
    if not draft:
        return

    comment = update.message.text
    await context.bot.send_message(
        chat_id=draft["user_id"],
        text=(
            "‚úèÔ∏è –í–∞—à –¥–æ–ø–∏—Å –ø–æ—Ç—Ä–µ–±—É—î –ø—Ä–∞–≤–æ–∫:\n\n"
            f"{comment}\n\n"
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤—É –≤–µ—Ä—Å—ñ—é —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å."
        ),
    )
    await update.message.reply_text("–ö–æ–º–µ–Ω—Ç–∞—Ä –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ—Ä—É.")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ MAIN ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def main() -> None:
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s | %(levelname)-8s | %(name)s: %(message)s",
    )

    app = Application.builder().token(BOT_TOKEN).build()

    # –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
    app.add_handler(CommandHandler("start", cmd_start))

    # –∫—Ä–æ–∫ 1 ‚Äî –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥—Å–∏–ª–∞—î –∫–æ–Ω—Ç–µ–Ω—Ç
    app.add_handler(
        MessageHandler(
            filters.ALL
            & ~filters.COMMAND
            & ~filters.Regex(f"^({'|'.join(CATEGORIES)})$"),
            handle_payload,
        )
    )

    # –∫—Ä–æ–∫ 2 ‚Äî –≤–∏–±—ñ—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    app.add_handler(
        MessageHandler(filters.Regex(f"^({'|'.join(CATEGORIES)})$"), set_category)
    )

    # –∫–Ω–æ–ø–∫–∏ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó
    app.add_handler(CallbackQueryHandler(cb_moderation))

    # —Ç–µ–∫—Å—Ç-—Ä–æ–∑'—è—Å–Ω–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω–∞ –ø—ñ—Å–ª—è ‚úèÔ∏è
    app.add_handler(MessageHandler(filters.TEXT & filters.User(ADMIN_ID), admin_comment))

    logging.info("Bot starting‚Ä¶")
    app.run_polling(stop_signals=None)  # Railway kill ‚Üí –ø—Ä–æ—Ü–µ—Å –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è —Å–∞–º


if __name__ == "__main__":
    main()